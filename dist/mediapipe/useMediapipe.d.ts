import { UseFaceDetectorProps, UseFaceDetectorResult } from "./useFaceDetector";
import { UseFaceLandmarkerProps, UseFaceLandmarkerResult } from "./useFaceLandmarker";
import { UseGestureRecognizerProps, UseGestureRecognizerResult } from "./useGestureRecognizer";
import { UseHandLandmarkerProps, UseHandLandmarkerResult } from "./useHandLandmarker";
import { UseImageSegmenterProps, UseImageSegmenterResult } from "./useImageSegmenter";
import { UseMediapipeHolisticProps, UseMediapipeHolisticResult } from "./useMediapipeHolistic";
import { UseMediapipeObjectronProps, UseMediapipeObjectronResult } from "./useMediapipeObjectron";
import { UseMediapipePoseProps, UseMediapipePoseResult } from "./useMediapipePose";
import { UsePoseLandmarkerProps, UsePoseLandmarkerResult } from "./usePoseLandmarker";
import { UseSelfieSegmenterProps, UseSelfieSegmenterResult } from "./useSelfieSegmenter";
type Model = "faceDetector" | "faceLandmarker" | "gestureRecognizer" | "handLandmarker" | "imageSegmenter" | "holistic" | "objectron" | "pose" | "poseLandmarker" | "selfieSegmenter";
type ModelPropsMap = {
    faceDetector: UseFaceDetectorProps;
    faceLandmarker: UseFaceLandmarkerProps;
    gestureRecognizer: UseGestureRecognizerProps;
    handLandmarker: UseHandLandmarkerProps;
    imageSegmenter: UseImageSegmenterProps;
    holistic: UseMediapipeHolisticProps;
    objectron: UseMediapipeObjectronProps;
    pose: UseMediapipePoseProps;
    poseLandmarker: UsePoseLandmarkerProps;
    selfieSegmenter: UseSelfieSegmenterProps;
};
type ModelResultMap = {
    faceDetector: UseFaceDetectorResult;
    faceLandmarker: UseFaceLandmarkerResult;
    gestureRecognizer: UseGestureRecognizerResult;
    handLandmarker: UseHandLandmarkerResult;
    imageSegmenter: UseImageSegmenterResult;
    holistic: UseMediapipeHolisticResult;
    objectron: UseMediapipeObjectronResult;
    pose: UseMediapipePoseResult;
    poseLandmarker: UsePoseLandmarkerResult;
    selfieSegmenter: UseSelfieSegmenterResult;
};
type ModelProps<T extends Model> = T extends keyof ModelPropsMap ? ModelPropsMap[T] : never;
type ModelResult<T extends Model> = T extends keyof ModelResultMap ? ModelResultMap[T] : never;
export declare function useMediapipe<T extends Model>(model: T, modelProps: Partial<ModelProps<T>>): ModelResult<T>;
export {};
//# sourceMappingURL=useMediapipe.d.ts.map